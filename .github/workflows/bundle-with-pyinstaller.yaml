name: Bundle EXE 

on:
  push:
    tags:
      - "*"
jobs:
  tag_version:
    name: Create version identifiers
    runs-on: "ubuntu-latest"
    # NOTE: slugified_version_name can now be used in other jobs (referenced via needs.tag_version.outputs.slugified_version_name)
    permissions:
      contents: write
    outputs:
      slug_version: ${{ steps.save.outputs.slug_version }}
      # NOTE: ${GITHUB_REF_NAME//./-} is bash syntax for referencing the default environment $GITHUB_REF and replacing dots with dashes (in the form //<tobereplaced>/<replacewith>)
      # NOTE: for comparison, double brackets like ${{ matrix.name }} is for referencing github workflow variables (and is not bash syntax)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      # add the slugified (ie replace periods with dashes) to the version name to the saved output variables file
      - id: save
        run: |
          slug_version="${GITHUB_REF_NAME//./-}" | sed -e "s/\./\-/g"
          echo "slug_version=${slug_version}" >> $GITHUB_OUTPUT
      # add git tag version to app script
      - id: title_in_version
        name: Add version number to app title
        run: |
          version="${GITHUB_REF_NAME}"
          title_with_version="DSC Data Packaging Tool - alpha - ${version}"
          echo $title_with_version
          sed -i -e "s/DSC Data Packaging Tool*/${title_with_version}/g" dsc_pkg_tool.py
          git add dsc_pkg_tool.py
          git commit -m "Update app title to ${version}"
          git push

  release:
    name: Create a release from a tag
    runs-on: "ubuntu-latest"
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download artifacts (the zipped pyinstaller exe for each os)
        uses: actions/download-artifact@v3
      - name: Release with bundles
        uses: softprops/action-gh-release@v1
        with:
          draft: true
  bundle:
    name: Bundle exe for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    needs: 
      - release
      - tag_version
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows
          - os: macos-latest
            name: mac
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Bundle EXE for mac  
      run: |
        pyinstaller --icon=heal-icon.ico --add-data="heal-icon.ico:." --collect-all pipe --hidden-import pipe --hidden-import pyreadstat._readstat_writer --hidden-import pyreadstat.worker --paths=. --debug=all --onefile dsc_pkg_tool.py
      if: ${{ matrix.name == 'mac' }} 
    - name: Bundle EXE for windows 
      run: |
        pyinstaller --icon=heal-icon.ico --add-data="heal-icon.ico;." --collect-all pipe --hidden-import pipe --hidden-import pyreadstat._readstat_writer --hidden-import pyreadstat.worker --paths=. --debug=all --onefile dsc_pkg_tool.py
      if: ${{matrix.name == 'windows' }} 
    - name: Zip exe (for windows) and no ext (for ubuntu/mac)
      run: |
        zipped_file_name=dsc-pkg-tool-${{ matrix.name }}${{ needs.tag_version.outputs.slug_version }}.zip
        python -m zipfile -c  $zipped_file_name dist/dsc_pkg_tool.exe dist/dsc_pkg_tool
    - name: Release with bundles
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        files: |
          *dsc-pkg-tool-${{ matrix.name }}${{ needs.tag_version.outputs.slug_version }}.zip